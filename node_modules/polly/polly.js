var hat = require('hat'),
	cookie = require('ajncookie');	

var Polly = function() {
	this.contexts = { };
	this.events = { };
	this.eventCounter = 0;
	this.backEvents = 5;
	this.cookieName = "POLLY_ID";
	this.refreshTimeout = 3333;
	this.purgeTimeout = 10000;
	var polly = this;
	this.refresher = setInterval(function() {
		polly.refreshContext();
	}, this._refreshTimeout);
	this.purger = setInterval(function() {
		polly._purgeContext();
	}, this.refreshTimeout);
	
}
Polly.prototype.refreshContext = function() {
	var now = new Date();
	for(var i in this.contexts) {
		var c = this.contexts[i];
		if(now - c.d > this.refreshTimeout) {
			this.contexts[i].res.end(JSON.stringify({ status: true }));
			console.log("Session "+c.id+" refreshed!");
		}
	}
}
Polly.prototype._purgeContext = function() {
	var now = new Date();
	for(var i in this.contexts) {
		var c = this.contexts[i];
		if(now - c.d > this.purgeTimeout) {
			this.unregisterSession(i);
			console.log("Session "+c.id+" purged!");
		}
	}
}

Polly.prototype.getSessionCount = function() {
	return Object.keys(this.contexts).length;
}

Polly.prototype.registerSession = function(req, res, data) {
	var id = hat();
	var uid = hat();
	data.id = uid;
	this.contexts[id] = {
		id: id,
		data: data,
		d: new Date()
	}
	cookie.setCookie(res, this.cookieName, id, false, false, false, true);
	this.pushEvent(id, "user_join", {});
	console.log("Session " + id + " registered!");
	return id;
}

Polly.prototype.unregisterSession = function(id) {
	if(this.contexts[id]) {
		this.contexts[id].res.end(JSON.stringify({ status: false }));
		this.pushEvent(id, "user_part", {});
		delete this.contexts[id];
		console.log("Session " + id + " destroyed!");
	}
}

Polly.prototype.getSession = function(id) {
	return this.contexts[id];
}

Polly.prototype.getUserData = function(id) {
	return this.contexts[id] ? this.contexts[id].data : null;
}

Polly.prototype.getSessionId = function(req) {
	return cookie.getCookie(req, this.cookieName);
}

Polly.prototype.getAllSessionsData = function() {
	var datas = [];
	for(var i in this.contexts) {
		datas.push(this.getSession(i).data);
	}
	return datas;
}

Polly.prototype.holdSession = function(req, res) {
	var id = this.getSessionId(req);
	if(this.contexts[id]) {
		var lastEventId = req.params.lastEventId;
		var eventsToSend = this._getLastEventsById(lastEventId);
		if(eventsToSend.length > 0) {
			res.end(JSON.stringify({ status: true, events: eventsToSend }));
			console.log(eventsToSend.length + " events sent to session " + id);
			return true;
		} 
		if(id && this.contexts[id]) {
			this.contexts[id].req = req;
			this.contexts[id].res = res;
			this.contexts[id].d = new Date();
			console.log("Session " + id + " holded!");
			return true;
		}
	}
	return false;
}

Polly.prototype._createEvent = function(eventType, eventData, user) {
	var event = {
		id: this.eventCounter++,
		type: eventType,
		data: eventData,
		user: user
	}
	this.events[event.id] = event;
	return event;
}

Polly.prototype._getLastEventsById = function(eventId) {
	var eventsToSend = [];
	for(var i in this.events) {
		if(this.events[i].id > eventId) eventsToSend.push(this.events[i]);
	}
	eventsToSend = eventsToSend.splice(-this.backEvents,this.backEvents);
	return eventsToSend;
}

Polly.prototype.pushEvent = function(id, eventType, eventData) {
	var user = this.getUserData(id);
	var event = this._createEvent(eventType, eventData, user);
	for(var i in this.contexts) {
		if(this.getSession(i).res)
			this.getSession(i).res.end(JSON.stringify({ status: true, events: [event] }));
	}
}

module.exports = new Polly();
